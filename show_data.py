#!/usr/bin/env python3
"""
Script para mostrar los datos de la base de datos - ideal para capturas de pantalla
"""
import sqlite3
import json

def show_database_content():
    """Muestra el contenido de la base de datos de forma organizada"""
    
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        
        print("="*80)
        print("üìä PRUEBA T√âCNICA - CONTENIDO DE LA BASE DE DATOS")
        print("="*80)
        print()
        
        # 1. Estad√≠sticas generales
        total = cursor.execute("SELECT COUNT(*) FROM items").fetchone()[0]
        print(f"üìà ESTAD√çSTICAS GENERALES:")
        print(f"   ‚Ä¢ Total de registros cargados: {total}")
        print()
        
        # 2. Verificar campos disponibles
        cursor.execute("PRAGMA table_info(items)")
        columns = [row[1] for row in cursor.fetchall()]
        print(f"üìã CAMPOS DISPONIBLES: {', '.join(columns)}")
        print()
        
        # 3. Mostrar primeros 8 registros
        print("üìö PRIMEROS 8 REGISTROS EN LA BASE DE DATOS:")
        print("-"*80)
        
        cursor.execute("""
            SELECT id, title, author, date, genre, type, location
            FROM items 
            ORDER BY title 
            LIMIT 8
        """)
        
        for i, row in enumerate(cursor.fetchall(), 1):
            id_val, title, author, date, genre, type_val, location = row
            
            # Formatear ID para mostrar solo la parte final
            id_short = id_val.split('/')[-1] if id_val else "N/A"
            
            print(f"{i:2d}. üÜî ID: {id_short}")
            print(f"    üìñ T√≠tulo: {title or 'N/A'}")
            print(f"    üë§ Autor: {author or 'N/A'}")
            print(f"    üìÖ A√±o: {date or 'N/A'}")
            print(f"    üè∑Ô∏è G√©nero: {genre or 'N/A'}")
            print(f"    üìÇ Tipo: {type_val or 'N/A'}")
            print(f"    üìç Ubicaci√≥n: {location or 'N/A'}")
            print()
        
        # 4. G√©neros m√°s frecuentes
        print("üé≠ G√âNEROS M√ÅS FRECUENTES:")
        print("-"*50)
        
        cursor.execute("""
            SELECT genre, COUNT(*) as count 
            FROM items 
            WHERE genre IS NOT NULL AND genre != '' AND genre != 'N/A'
            GROUP BY genre 
            ORDER BY count DESC 
            LIMIT 10
        """)
        
        genres = cursor.fetchall()
        if genres:
            for genre, count in genres:
                print(f"   ‚Ä¢ {genre}: {count} libro(s)")
        else:
            print("   ‚Ä¢ No hay g√©neros espec√≠ficos cargados")
        
        print()
        
        # 5. Autores m√°s frecuentes
        print("‚úçÔ∏è AUTORES M√ÅS FRECUENTES:")
        print("-"*50)
        
        cursor.execute("""
            SELECT author, COUNT(*) as count 
            FROM items 
            WHERE author IS NOT NULL AND author != '' AND author != 'N/A'
            GROUP BY author 
            ORDER BY count DESC 
            LIMIT 8
        """)
        
        authors = cursor.fetchall()
        if authors:
            for author, count in authors:
                print(f"   ‚Ä¢ {author}: {count} obra(s)")
        else:
            print("   ‚Ä¢ No hay autores espec√≠ficos cargados")
        
        print()
        print("="*80)
        print("‚úÖ DATOS LISTOS PARA DEMOSTRACI√ìN DE LA API Y AGENTE")
        print("="*80)
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error al acceder a la base de datos: {e}")
        print("üí° Aseg√∫rate de haber ejecutado: python -m etl.load")

if __name__ == "__main__":
    show_database_content()